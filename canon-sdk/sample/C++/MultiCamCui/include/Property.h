#pragma once

#include <map>
#include <vector>
#include <algorithm>
#include "EDSDK.h"
#include "EDSDKTypes.h"

std::map<EdsUInt32, const char *> iso_table = {
    {0x00, "Auto"},
    {0x28, "6"},
    {0x30, "12"},
    {0x38, "25"},
    {0x40, "50"},
    {0x48, "100"},
    {0x4b, "125"},
    {0x4d, "160"},
    {0x50, "200"},
    {0x53, "250"},
    {0x55, "320"},
    {0x58, "400"},
    {0x5b, "500"},
    {0x5d, "640"},
    {0x60, "800"},
    {0x63, "1000"},
    {0x65, "1250"},
    {0x68, "1600"},
    {0x6b, "2000"},
    {0x6d, "2500"},
    {0x70, "3200"},
    {0x73, "4000"},
    {0x75, "5000"},
    {0x78, "6400"},
    {0x7b, "8000"},
    {0x7d, "10000"},
    {0x80, "12800"},
    {0x83, "16000"},
    {0x85, "20000"},
    {0x88, "25600"},
    {0x8b, "32000"},
    {0x8d, "40000"},
    {0x90, "51200"},
    {0x93, "64000"},
    {0x95, "80000"},
    {0x98, "102400"},
    {0xa0, "204800"},
    {0xa8, "409600"},
    {0xb0, "819200"},
    {0xffffffff, "unknown value"}};

std::map<EdsUInt32, const char *> tv_table = {
    {0x04, "Auto"},
    {0x0c, "Bulb"},
    {0x10, "30''"},
    {0x13, "25''"},
    {0x14, "20''"},
    {0x15, "20''"},
    {0x18, "15''"},
    {0x1B, "13''"},
    {0x1C, "10''"},
    {0x1D, "10''"},
    {0x20, "8''"},
    {0x23, "6''"},
    {0x24, "6''"},
    {0x25, "5''"},
    {0x28, "4''"},
    {0x2B, "3''2"},
    {0x2C, "3''"},
    {0x2D, "2''5"},
    {0x30, "2''"},
    {0x33, "1''6"},
    {0x34, "1''5"},
    {0x35, "1''3"},
    {0x38, "1''"},
    {0x3B, "0''8"},
    {0x3C, "0''7"},
    {0x3D, "0''6"},
    {0x40, "0''5"},
    {0x43, "0''4"},
    {0x44, "0''3"},
    {0x45, "0''3"},
    {0x48, "4"},
    {0x4B, "5"},
    {0x4C, "6"},
    {0x4D, "6"},
    {0x50, "8"},
    {0x53, "10"},
    {0x54, "10"},
    {0x55, "13"},
    {0x58, "15"},
    {0x5B, "20"},
    {0x5C, "20"},
    {0x5D, "25"},
    {0x60, "30"},
    {0x63, "40"},
    {0x64, "45"},
    {0x65, "50"},
    {0x68, "60"},
    {0x6B, "80"},
    {0x6C, "90"},
    {0x6D, "100"},
    {0x70, "125"},
    {0x73, "160"},
    {0x74, "180"},
    {0x75, "200"},
    {0x78, "250"},
    {0x7B, "320"},
    {0x7C, "350"},
    {0x7D, "400"},
    {0x80, "500"},
    {0x83, "640"},
    {0x84, "750"},
    {0x85, "800"},
    {0x88, "1000"},
    {0x8B, "1250"},
    {0x8C, "1500"},
    {0x8D, "1600"},
    {0x90, "2000"},
    {0x93, "2500"},
    {0x94, "3000"},
    {0x95, "3200"},
    {0x98, "4000"},
    {0x9B, "5000"},
    {0x9C, "6000"},
    {0x9D, "6400"},
    {0xA0, "8000"},
    {0xA3, "10000"},
    {0xA5, "12800"},
    {0xA8, "16000"},
    {0xffffffff, "unknown value"}};

std::map<EdsUInt32, const char *> av_table = {
    {0x00, ""},
    {0x08, "1.0"},
    {0x0B, "1.1"},
    {0x0C, "1.2"},
    {0x0D, "1.2"},
    {0x10, "1.4"},
    {0x13, "1.6"},
    {0x14, "1.8"},
    {0x15, "1.8"},
    {0x18, "2.0"},
    {0x1B, "2.2"},
    {0x1C, "2.5"},
    {0x1D, "2.5"},
    {0x20, "2.8"},
    {0x23, "3.2"},
    {0x80, "3.3"},
    {0x85, "3.4"},
    {0x24, "3.5"},
    {0x25, "3.5"},
    {0x28, "4.0"},
    {0x2B, "4.5"},
    {0x2C, "4.5"},
    {0x2D, "5.0"},
    {0x30, "5.6"},
    {0x33, "6.3"},
    {0x34, "6.7"},
    {0x35, "7.1"},
    {0x38, "8.0"},
    {0x3B, "9.0"},
    {0x3C, "9.5"},
    {0x3D, "10"},
    {0x40, "11"},
    {0x43, "13"},
    {0x44, "13"},
    {0x45, "14"},
    {0x48, "16"},
    {0x4B, "18"},
    {0x4C, "19"},
    {0x4D, "20"},
    {0x50, "22"},
    {0x53, "25"},
    {0x54, "27"},
    {0x55, "29"},
    {0x58, "32"},
    {0x5B, "36"},
    {0x5C, "38"},
    {0x5D, "40"},
    {0x60, "45"},
    {0x63, "51"},
    {0x64, "54"},
    {0x65, "57"},
    {0x68, "64"},
    {0x6B, "72"},
    {0x6C, "76"},
    {0x6D, "80"},
    {0x70, "91"},
    {0xFF, "Auto"},
    {0xffffffff, "unknown value"}};

std::map<EdsUInt32, const char *> whitebalance_table = {
    {0, "Auto: Ambience priority"},
    {1, "Daylight"},
    {2, "Cloudy"},
    {3, "Tungsten light"},
    {4, "White fluorescent light"},
    {5, "Flash"},
    {6, "Custom1"},
    {8, "Shade"},
    {9, "Color temp."},
    {10, "Custom white balance PC-1"},
    {11, "Custom white balance PC-2"},
    {12, "Custom white balance PC-3"},
    {15, "Custom2"},
    {16, "Custom3"},
    {17, "Underwater"},
    {18, "Custom4"},
    {19, "Custom5"},
    {20, "Custom white balance PC-4"},
    {21, "Custom white balance PC-5"},
    {23, "Auto: White priority"}};

std::map<EdsUInt32, const char *> drivemode_table = {
    {0x00, "Single shooting"},
    {0x01, "Medium speed continuous"},
    {0x04, "High speed continuous"},
    {0x05, "Low speed continuous"},
    {0x06, "Single Silent(Soft) shooting"},
    {0x07, "Self-timer:Continuous"},
    {0x10, "Self-timer 10 sec"},
    {0x11, "Self-timer 2 sec"},
    {0x12, "High speed continuous +"},
    {0x13, "Silent single shooting"},
    {0x14, "Silent(Soft) contin shooting"},
    {0x15, "Silent HS continuous"},
    {0x16, "Silent(Soft) LS continuous"}};

std::map<EdsUInt32, const char *> ExposureComp_table = {
    {0x28, "+5"},
    {0x25, "+4 2/3"},
    {0x24, "+4 1/2"},
    {0x23, "+4 1/3"},
    {0x20, "+4"},
    {0x1D, "+3 2/3"},
    {0x1C, "+3 1/2"},
    {0x1B, "+3 1/3"},
    {0x18, "+3"},
    {0x15, "+2 2/3"},
    {0x14, "+2 1/2"},
    {0x13, "+2 1/3"},
    {0x10, "+2"},
    {0x0d, "+1 2/3"},
    {0x0c, "+1 1/2"},
    {0x0b, "+1 1/3"},
    {0x08, "+1"},
    {0x05, "+2/3"},
    {0x04, "+1/2"},
    {0x03, "+1/3"},
    {0x00, "0"},
    {0xfd, "-1/3"},
    {0xfc, "-1/2"},
    {0xfb, "-2/3"},
    {0xf8, "-1"},
    {0xf5, "-1 1/3"},
    {0xf4, "-1 1/2"},
    {0xf3, "-1 2/3"},
    {0xf0, "-2"},
    {0xed, "-2 1/3"},
    {0xec, "-2 1/2"},
    {0xeb, "-2 2/3"},
    {0xe8, "-3"},
    {0xE5, "-3 1/3"},
    {0xE4, "-3 1/2"},
    {0xE3, "-3 2/3"},
    {0xE0, "-4"},
    {0xDD, "-4 1/3"},
    {0xDC, "-4 1/2"},
    {0xDB, "-4 2/3"},
    {0xD8, "-5"},
    {0xffffffff, "unknown"}};

std::map<EdsUInt32, const char *> AEmode_table = {
    {0, "P"},
    {1, "Tv"},
    {2, "Av"},
    {3, "M"},
    {55, "Fv"},
    {4, "Bulb"},
    {5, "A-DEP"},
    {6, "DEP"},
    {7, "C1"},
    {8, "Lock"},
    {9, "GreenMode"},
    {10, "Night Portrait"},
    {11, "Sports"},
    {12, "Portrait"},
    {13, "Landscape"},
    {14, "Close-up"},
    {15, "No Strobo"},
    {16, "C2"},
    {17, "C3"},
    {19, "Creative Auto"},
    {20, "Movies"},
    {21, "Photo In Movie"},
    {22, "Scene Intelligent Auto"},
    {23, "Handheld Night Scene"},
    {24, "HDR Backlight Control"},
    {25, "SCN"},
    {26, "Kids"},
    {27, "Food"},
    {28, "Candlelight"},
    {29, "Creative filters"},
    {30, "Grainy B/W"},
    {31, "Soft focus"},
    {32, "Toy camera effect"},
    {33, "Fish-eye effect"},
    {34, "Water painting effect"},
    {35, "Miniature effect"},
    {36, "HDR art standard"},
    {37, "HDR art vivid"},
    {38, "HDR art bold"},
    {39, "HDR art embossed"},
    {40, "Dream"},
    {41, "Old Movies"},
    {42, "Memory"},
    {43, "Dramatic B&W"},
    {44, "Miniature effect movie"},
    {45, "Panning"},
    {46, "Group Photo"},
    {50, "Self Portrait"},
    {51, "Plus Movie Auto"},
    {52, "Smooth skin"},
    {53, "Panorama"},
    {54, "Silent Mode"},
    {56, "Art bold effect"},
    {57, "Fireworks"},
    {58, "Star portrait"},
    {59, "Star nightscape"},
    {60, "Star trails"},
    {61, "Star time-lapse movie"},
    {62, "Background blur"},
    {63, "VideoBlog"},
    {65, "Movie IS mode"},
    {67, "Smooth skin movie"},
    {0xffffffff, "unknown value"}};

std::map<EdsUInt32, const char *> AFmode_table = {
    {0, "One-Shot AF"},
    {1, "AI Servo AF"},
    {2, "AI Focus AF"},
    {3, "Manual Focus"},
    {0xffffffff, "unknown"}};

std::map<EdsUInt32, const char *> Aspect_table = {
    {0x0000, "Full-frame"},
    {0x0001, "1:1(aspect ratio)"},
    {0x0002, "4:3(aspect ratio)"},
    {0x0007, "16:9(aspect ratio)"},
    {0x000d, "1.6x(crop)"}};

std::map<EdsUInt32, const char *> SaveTo_table = {
    {1, "Save To Camera"},
    {2, "Save To Host"},
    {3, "Both"}};

std::map<EdsUInt32, const char *> EvfOutputDevice_table = {
    {0, "OFF"},
    {1, "Output to TFT Monitor"},
    {2, "Output to Remote PC"},
    {3, "Output to TFT Monitor & Remote PC"},
    {8, "Output to Remote PC (small size)"},
    {9, "Output to TFT Monitor & Remote PC (small size)"},
};

std::map<EdsUInt32, const char *> ImageQuality_table = {
    {EdsImageQuality_LJ, "Jpeg Large"},
    {EdsImageQuality_MJ, "Jpeg Middle"},
    {EdsImageQuality_M1J, "Jpeg Middle1"},
    {EdsImageQuality_M1F, "Jpeg Middle1 Fine"},
    {EdsImageQuality_M1N, "Jpeg Middle1 Normal"},
    {EdsImageQuality_M2J, "Jpeg Middle2"},
    {EdsImageQuality_M2F, "Jpeg Middle2 Fine"},
    {EdsImageQuality_M2N, "Jpeg Middle2 Normal"},
    {EdsImageQuality_SJ, "Jpeg Small"},
    {EdsImageQuality_S1J, "Jpeg Small1"},
    {EdsImageQuality_S2J, "Jpeg Small2"},
    {EdsImageQuality_LJF, "Jpeg Large Fine"},
    {EdsImageQuality_LJN, "Jpeg Large Normal"},
    {EdsImageQuality_MJF, "Jpeg Middle Fine"},
    {EdsImageQuality_MJN, "Jpeg Middle Normal"},
    {EdsImageQuality_SJF, "Jpeg Small Fine"},
    {EdsImageQuality_SJN, "Jpeg Small Normal"},
    {EdsImageQuality_S1JF, "Jpeg Small1 Fine"},
    {EdsImageQuality_S1JN, "Jpeg Small1 Normal"},
    {EdsImageQuality_S2JF, "Jpeg Small2"},
    {EdsImageQuality_S3JF, "Jpeg Small3"},

    {EdsImageQuality_LR, "RAW"},
    {EdsImageQuality_LRLJF, "RAW + Jpeg Large Fine"},
    {EdsImageQuality_LRLJN, "RAW + Jpeg Large Normal"},
    {EdsImageQuality_LRMJF, "RAW + Jpeg Middle Fine"},
    {EdsImageQuality_LRMJN, "RAW + Jpeg Middle Normal"},
    {EdsImageQuality_LRSJF, "RAW + Jpeg Small Fine"},
    {EdsImageQuality_LRSJN, "RAW + Jpeg Small Normal"},
    {EdsImageQuality_LRS1JF, "RAW + Jpeg Small1 Fine"},
    {EdsImageQuality_LRS1JN, "RAW + Jpeg Small1 Normal"},
    {EdsImageQuality_LRS2JF, "RAW + Jpeg Small2"},
    {EdsImageQuality_LRS3JF, "RAW + Jpeg Small3"},
    {EdsImageQuality_LRLJ, "RAW + Jpeg Large"},
    {EdsImageQuality_LRMJ, "RAW + Jpeg Middle"},
    {EdsImageQuality_LRM1J, "RAW + Jpeg Middle1"},
    {EdsImageQuality_LRM1F, "RAW + Jpeg Middle1 Fine"},
    {EdsImageQuality_LRM1N, "RAW + Jpeg Middle1 Normal"},
    {EdsImageQuality_LRM2J, "RAW + Jpeg Middle2"},
    {EdsImageQuality_LRM2F, "RAW + Jpeg Middle2 Fine"},
    {EdsImageQuality_LRM2N, "RAW + Jpeg Middle2 Normal"},
    {EdsImageQuality_LRSJ, "RAW + Jpeg Small"},
    {EdsImageQuality_LRS1J, "RAW + Jpeg Small1"},
    {EdsImageQuality_LRS2J, "RAW + Jpeg Small2"},

    {EdsImageQuality_MR, "MRAW(SRAW1)"},
    {EdsImageQuality_MRLJF, "MRAW(SRAW1) + Jpeg Large Fine"},
    {EdsImageQuality_MRLJN, "MRAW(SRAW1) + Jpeg Large Normal"},
    {EdsImageQuality_MRMJF, "MRAW(SRAW1) + Jpeg Middle Fine"},
    {EdsImageQuality_MRMJN, "MRAW(SRAW1) + Jpeg Middle Normal"},
    {EdsImageQuality_MRSJF, "MRAW(SRAW1) + Jpeg Small Fine"},
    {EdsImageQuality_MRSJN, "MRAW(SRAW1) + Jpeg Small Normal"},
    {EdsImageQuality_MRS1JF, "MRAW(SRAW1) + Jpeg Small1 Fine"},
    {EdsImageQuality_MRS1JN, "MRAW(SRAW1) + Jpeg Small1 Normal"},
    {EdsImageQuality_MRS2JF, "MRAW(SRAW1) + Jpeg Small2"},
    {EdsImageQuality_MRS3JF, "MRAW(SRAW1) + Jpeg Small3"},

    {EdsImageQuality_MRLJ, "MRAW(SRAW1) + Jpeg Large"},
    {EdsImageQuality_MRM1J, "MRAW(SRAW1) + Jpeg Middle1"},
    {EdsImageQuality_MRM1F, "MRAW(SRAW1) + Jpeg Middle1 Fine"},
    {EdsImageQuality_MRM1N, "MRAW(SRAW1) + Jpeg Middle1 Normal"},
    {EdsImageQuality_MRM2J, "MRAW(SRAW1) + Jpeg Middle2"},
    {EdsImageQuality_MRM2F, "MRAW(SRAW1) + Jpeg Middle2 Fine"},
    {EdsImageQuality_MRM2N, "MRAW(SRAW1) + Jpeg Middle2 Normal"},
    {EdsImageQuality_MRSJ, "MRAW(SRAW1) + Jpeg Small"},

    {EdsImageQuality_SR, "SRAW(SRAW2)"},
    {EdsImageQuality_SRLJF, "SRAW(SRAW2) + Jpeg Large Fine"},
    {EdsImageQuality_SRLJN, "SRAW(SRAW2) + Jpeg Large Normal"},
    {EdsImageQuality_SRMJF, "SRAW(SRAW2) + Jpeg Middle Fine"},
    {EdsImageQuality_SRMJN, "SRAW(SRAW2) + Jpeg Middle Normal"},
    {EdsImageQuality_SRSJF, "SRAW(SRAW2) + Jpeg Small Fine"},
    {EdsImageQuality_SRSJN, "SRAW(SRAW2) + Jpeg Small Normal"},
    {EdsImageQuality_SRS1JF, "SRAW(SRAW2) + Jpeg Small1 Fine"},
    {EdsImageQuality_SRS1JN, "SRAW(SRAW2) + Jpeg Small1 Normal"},
    {EdsImageQuality_SRS2JF, "SRAW(SRAW2) + Jpeg Small2"},
    {EdsImageQuality_SRS3JF, "SRAW(SRAW2) + Jpeg Small3"},

    {EdsImageQuality_SRLJ, "SRAW(SRAW2) + Jpeg Large"},
    {EdsImageQuality_SRM1J, "SRAW(SRAW2) + Jpeg Middle1"},
    {EdsImageQuality_SRM1F, "SRAW(SRAW2) + Jpeg Middle1 Fine"},
    {EdsImageQuality_SRM1N, "SRAW(SRAW2) + Jpeg Middle1 Normal"},
    {EdsImageQuality_SRM2J, "SRAW(SRAW2) + Jpeg Middle2"},
    {EdsImageQuality_SRM2F, "SRAW(SRAW2) + Jpeg Middle2 Fine"},
    {EdsImageQuality_SRM2N, "SRAW(SRAW2) + Jpeg Middle2 Normal"},
    {EdsImageQuality_SRSJ, "SRAW(SRAW2) + Jpeg Small"},

    {EdsImageQuality_CR, "CRAW"},
    {EdsImageQuality_CRLJF, "CRAW + Jpeg Large Fine"},
    {EdsImageQuality_CRMJF, "CRAW + Jpeg Middle Fine"},
    {EdsImageQuality_CRM1JF, "CRAW + Jpeg Middle1 Fine"},
    {EdsImageQuality_CRM2JF, "CRAW + Jpeg Middle2 Fine"},
    {EdsImageQuality_CRSJF, "CRAW + Jpeg Small Fine"},
    {EdsImageQuality_CRS1JF, "CRAW + Jpeg Small1 Fine"},
    {EdsImageQuality_CRS2JF, "CRAW + Jpeg Small2 Fine"},
    {EdsImageQuality_CRS3JF, "CRAW + Jpeg Small3 Fine"},
    {EdsImageQuality_CRLJN, "CRAW + Jpeg Large Normal"},
    {EdsImageQuality_CRMJN, "CRAW + Jpeg Middle Normal"},
    {EdsImageQuality_CRM1JN, "CRAW + Jpeg Middle1 Normal"},
    {EdsImageQuality_CRM2JN, "CRAW + Jpeg Middle2 Normal"},
    {EdsImageQuality_CRSJN, "CRAW + Jpeg Small Normal"},
    {EdsImageQuality_CRS1JN, "CRAW + Jpeg Small1 Normal"},

    {EdsImageQuality_CRLJ, "CRAW + Jpeg Large"},
    {EdsImageQuality_CRMJ, "CRAW + Jpeg Middle"},
    {EdsImageQuality_CRM1J, "CRAW + Jpeg Middle1"},
    {EdsImageQuality_CRM2J, "CRAW + Jpeg Middle2"},
    {EdsImageQuality_CRSJ, "CRAW + Jpeg Small"},
    {EdsImageQuality_CRS1J, "CRAW + Jpeg Small1"},
    {EdsImageQuality_CRS2J, "CRAW + Jpeg Small2"},

    {EdsImageQuality_HEIFL, "HEIF Large"},
    {EdsImageQuality_HEIFM, "HEIF Middle"},
    {EdsImageQuality_HEIFM1, "HEIF Middle1"},
    {EdsImageQuality_HEIFM2, "HEIF Middle2"},

    {EdsImageQuality_HEIFLF, "HEIF Large Fine"},
    {EdsImageQuality_HEIFLN, "HEIF Large Normal"},
    {EdsImageQuality_HEIFMF, "HEIF Middle Fine"},
    {EdsImageQuality_HEIFMN, "HEIF Middle Normal"},
    {EdsImageQuality_HEIFS1, "HEIF Small1"},
    {EdsImageQuality_HEIFS1F, "HEIF Small1 Fine"},
    {EdsImageQuality_HEIFS1N, "HEIF Small1 Normal"},
    {EdsImageQuality_HEIFS2, "HEIF Small2"},
    {EdsImageQuality_HEIFS2F, "HEIF Small2 Fine"},
    {EdsImageQuality_RHEIFL, "RAW  + HEIF Large"},
    {EdsImageQuality_RHEIFLF, "RAW + HEIF Large Fine"},
    {EdsImageQuality_RHEIFLN, "RAW + HEIF Large Normal"},
    {EdsImageQuality_RHEIFM, "RAW + HEIF Middle"},
    {EdsImageQuality_RHEIFM1, "RAW + HEIF Middle1"},
    {EdsImageQuality_RHEIFM2, "RAW + HEIF Middle2"},
    {EdsImageQuality_RHEIFMF, "RAW + HEIF Middle Fine"},
    {EdsImageQuality_RHEIFMN, "RAW + HEIF Middle Normal"},
    {EdsImageQuality_RHEIFS1, "RAW + HEIF Small1"},
    {EdsImageQuality_RHEIFS1F, "RAW + HEIF Small1 Fine"},
    {EdsImageQuality_RHEIFS1N, "RAW + HEIF Small1 Normal"},
    {EdsImageQuality_RHEIFS2, "RAW + HEIF Small2"},
    {EdsImageQuality_RHEIFS2F, "RAW + HEIF Small2 Fine"},
    {EdsImageQuality_CRHEIFL, "CRAW + HEIF Large"},
    {EdsImageQuality_CRHEIFLF, "CRAW + HEIF Large Fine"},
    {EdsImageQuality_CRHEIFLN, "CRAW + HEIF Large Normal"},
    {EdsImageQuality_CRHEIFM, "CRAW + HEIF Middle"},
    {EdsImageQuality_CRHEIFMF, "CRAW + HEIF Middle Fine"},
    {EdsImageQuality_CRHEIFMN, "CRAW + HEIF Middle Normal"},
    {EdsImageQuality_CRHEIFM1, "CRAW + HEIF Middle1"},
    {EdsImageQuality_CRHEIFM2, "CRAW + HEIF Middle2"},
    {EdsImageQuality_CRHEIFS1, "CRAW + HEIF Small1"},
    {EdsImageQuality_CRHEIFS1F, "CRAW + HEIF Small1 Fine"},
    {EdsImageQuality_CRHEIFS1N, "CRAW + HEIF Small1 Normal"},
    {EdsImageQuality_CRHEIFS2, "CRAW + HEIF Small2"},
    {EdsImageQuality_CRHEIFS2F, "CRAW + HEIF Small2 Fine"},
};

std::map<EdsUInt32, const char *> PictureStyle_table = {
    {kEdsPictureStyle_Standard, "Standard "},
    {kEdsPictureStyle_Portrait, "Portrait"},
    {kEdsPictureStyle_Landscape, "Landscape"},
    {kEdsPictureStyle_Neutral, "Neutral "},
    {kEdsPictureStyle_Faithful, "Faithful"},
    {kEdsPictureStyle_Monochrome, "Monochrome"},
    {kEdsPictureStyle_Auto, "Auto"},
    {kEdsPictureStyle_FineDetail, "FineDetail"},
    {kEdsPictureStyle_User1, "User1 "},
    {kEdsPictureStyle_User2, "User2"},
    {kEdsPictureStyle_User3, "User3"},
    {kEdsPictureStyle_PC1, "PC1"},
    {kEdsPictureStyle_PC2, "PC2"},
    {kEdsPictureStyle_PC3, "PC3"}};

std::map<EdsUInt32, const char *> DigitalZoom_table = {
    {10, "OFF "},
    {15, "1.5x"},
    {20, "2.0x"},
    {30, "3.0x"},
    {40, "4.0x"}};

std::map<EdsUInt32, const char *> ColorFilter_table = {
    {0x00000000, "OFF"},
    {0x00000001, "PaleTeal&Orange"},
    {0x00000002, "RetroGreen"},
    {0x00000003, "Sepiatone"},
    {0x00000004, "StoryBlue"},
    {0x00000005, "StoryMagenta"},
    {0x00000006, "StoryTeal&Orange"},
    {0x00000007, "ClearLightBlue"},
    {0x00000008, "ClearPurple"},
    {0x00000009, "ClearAmber"},
    {0x0000000a, "BrightWhite"},
    {0x0000000b, "BrightAmber"},
    {0x0000000c, "TastyCool"},
    {0x0000000d, "TastyWarm"},
    {0x0000000e, "AccentRed"}};

std::map<EdsUInt32, const char *> BrightnessSetting_table = {
    {0x00000001, "-3"},
    {0x00000002, "-2"},
    {0x00000003, "-1"},
    {0x00000004, " 0"},
    {0x00000005, "+1"},
    {0x00000006, "+2"},
    {0x00000007, "+3"}};

std::map<EdsUInt32, const char *> AfLockState_table = {
    {0x00000000, "Disable"},
    {0x00000001, "Enable"}};